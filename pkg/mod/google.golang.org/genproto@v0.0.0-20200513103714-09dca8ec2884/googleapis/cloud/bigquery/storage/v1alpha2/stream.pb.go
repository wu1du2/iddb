// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/bigquery/storage/v1alpha2/stream.proto

package storage

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WriteStream_Type int32

const (
	// Unknown type.
	WriteStream_TYPE_UNSPECIFIED WriteStream_Type = 0
	// Data will commit automatically and appear as soon as the write is
	// acknowledged.
	WriteStream_COMMITTED WriteStream_Type = 1
	// Data is invisible until the stream is committed.
	WriteStream_PENDING WriteStream_Type = 2
	// Data is only visible up to the offset to which it was flushed.
	WriteStream_BUFFERED WriteStream_Type = 3
)

var WriteStream_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "COMMITTED",
	2: "PENDING",
	3: "BUFFERED",
}

var WriteStream_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"COMMITTED":        1,
	"PENDING":          2,
	"BUFFERED":         3,
}

func (x WriteStream_Type) String() string {
	return proto.EnumName(WriteStream_Type_name, int32(x))
}

func (WriteStream_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cfe5157f29fe5b3a, []int{0, 0}
}

// Information about a single stream that gets data inside the storage system.
type WriteStream struct {
	// Output only. Name of the stream, in the form
	// `projects/{project}/datasets/{dataset}/tables/{table}/streams/{stream}`.
	Name string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type WriteStream_Type `protobuf:"varint,2,opt,name=type,proto3,enum=google.cloud.bigquery.storage.v1alpha2.WriteStream_Type" json:"type,omitempty"`
	// Output only. Create time of the stream.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Commit time of the stream.
	// If a stream is of `COMMITTED` type, then it will have a commit_time same as
	// `create_time`. If the stream is of `PENDING` type, commit_time being empty
	// means it is not committed.
	CommitTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=commit_time,json=commitTime,proto3" json:"commit_time,omitempty"`
	// Output only. The schema of the destination table. It is only returned in
	// `CreateWriteStream` response. Caller should generate data that's
	// compatible with this schema to send in initial `AppendRowsRequest`.
	// The table schema could go out of date during the life time of the stream.
	TableSchema *TableSchema `protobuf:"bytes,5,opt,name=table_schema,json=tableSchema,proto3" json:"table_schema,omitempty"`
	// Id set by client to annotate its identity.
	ExternalId           string   `protobuf:"bytes,6,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteStream) Reset()         { *m = WriteStream{} }
func (m *WriteStream) String() string { return proto.CompactTextString(m) }
func (*WriteStream) ProtoMessage()    {}
func (*WriteStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfe5157f29fe5b3a, []int{0}
}

func (m *WriteStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteStream.Unmarshal(m, b)
}
func (m *WriteStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteStream.Marshal(b, m, deterministic)
}
func (m *WriteStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteStream.Merge(m, src)
}
func (m *WriteStream) XXX_Size() int {
	return xxx_messageInfo_WriteStream.Size(m)
}
func (m *WriteStream) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteStream.DiscardUnknown(m)
}

var xxx_messageInfo_WriteStream proto.InternalMessageInfo

func (m *WriteStream) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WriteStream) GetType() WriteStream_Type {
	if m != nil {
		return m.Type
	}
	return WriteStream_TYPE_UNSPECIFIED
}

func (m *WriteStream) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *WriteStream) GetCommitTime() *timestamp.Timestamp {
	if m != nil {
		return m.CommitTime
	}
	return nil
}

func (m *WriteStream) GetTableSchema() *TableSchema {
	if m != nil {
		return m.TableSchema
	}
	return nil
}

func (m *WriteStream) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func init() {
	proto.RegisterEnum("google.cloud.bigquery.storage.v1alpha2.WriteStream_Type", WriteStream_Type_name, WriteStream_Type_value)
	proto.RegisterType((*WriteStream)(nil), "google.cloud.bigquery.storage.v1alpha2.WriteStream")
}

func init() {
	proto.RegisterFile("google/cloud/bigquery/storage/v1alpha2/stream.proto", fileDescriptor_cfe5157f29fe5b3a)
}

var fileDescriptor_cfe5157f29fe5b3a = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xc9, 0xda, 0x0d, 0xe6, 0x0c, 0x54, 0x59, 0x48, 0x94, 0x5e, 0x56, 0x4d, 0x08, 0x55,
	0x3b, 0xd8, 0xa2, 0xe5, 0x80, 0xe0, 0x42, 0xbb, 0xa6, 0xa8, 0x87, 0x96, 0xd2, 0x66, 0x42, 0xfc,
	0x91, 0x2a, 0x37, 0x79, 0x97, 0x06, 0x25, 0x75, 0xb0, 0xdd, 0x8a, 0xaa, 0xea, 0x27, 0xe3, 0x9b,
	0x70, 0xe2, 0xbc, 0x4f, 0x81, 0x62, 0xc7, 0x5a, 0x6f, 0x8b, 0x38, 0xc5, 0x79, 0xe2, 0xe7, 0xe7,
	0xe7, 0x7d, 0xfd, 0x06, 0x75, 0x22, 0xce, 0xa3, 0x04, 0x68, 0x90, 0xf0, 0x75, 0x48, 0x17, 0x71,
	0xf4, 0x73, 0x0d, 0x62, 0x4b, 0xa5, 0xe2, 0x82, 0x45, 0x40, 0x37, 0xaf, 0x58, 0x92, 0x2d, 0x59,
	0x9b, 0x4a, 0x25, 0x80, 0xa5, 0x24, 0x13, 0x5c, 0x71, 0xfc, 0xd2, 0x98, 0x88, 0x36, 0x11, 0x6b,
	0x22, 0x85, 0x89, 0x58, 0x53, 0xe3, 0xbc, 0x80, 0xb3, 0x2c, 0xa6, 0x37, 0x31, 0x24, 0xe1, 0x7c,
	0x01, 0x4b, 0xb6, 0x89, 0xb9, 0x30, 0xa0, 0xc6, 0xf3, 0x83, 0x0d, 0x02, 0x24, 0x5f, 0x8b, 0x00,
	0x8a, 0x4f, 0xed, 0x92, 0xc1, 0x14, 0x5b, 0x24, 0xd6, 0x63, 0xcf, 0xd3, 0x6f, 0x8b, 0xf5, 0x0d,
	0x55, 0x71, 0x0a, 0x52, 0xb1, 0x34, 0x33, 0x1b, 0x2e, 0x7e, 0x57, 0x91, 0xfb, 0x59, 0xc4, 0x0a,
	0x66, 0xba, 0x1c, 0xfc, 0x0c, 0x55, 0x57, 0x2c, 0x85, 0xba, 0xd3, 0x74, 0x5a, 0xa7, 0xbd, 0xca,
	0xdf, 0x6e, 0x65, 0xaa, 0x05, 0xfc, 0x09, 0x55, 0xd5, 0x36, 0x83, 0xfa, 0x51, 0xd3, 0x69, 0x3d,
	0x69, 0xbf, 0x21, 0xe5, 0x0a, 0x26, 0x07, 0x6c, 0xe2, 0x6f, 0x33, 0xc8, 0x91, 0xc7, 0x53, 0x8d,
	0xc2, 0xef, 0x91, 0x1b, 0x08, 0x60, 0x0a, 0xe6, 0x79, 0xaa, 0x7a, 0xa5, 0xe9, 0xb4, 0xdc, 0x76,
	0xc3, 0x92, 0x6d, 0x64, 0xe2, 0xdb, 0xc8, 0x26, 0x0e, 0x32, 0x9e, 0x5c, 0xd5, 0x04, 0x9e, 0xa6,
	0xb1, 0x32, 0x84, 0x6a, 0x59, 0x82, 0xf6, 0x68, 0xc2, 0x37, 0x74, 0xa6, 0xfb, 0x35, 0x97, 0xc1,
	0x12, 0x52, 0x56, 0x3f, 0xd6, 0x88, 0x4e, 0xd9, 0xf2, 0xfc, 0xdc, 0x3b, 0xd3, 0x56, 0xc3, 0x76,
	0xd5, 0x9d, 0x82, 0xcf, 0x91, 0x0b, 0xbf, 0x14, 0x88, 0x15, 0x4b, 0xe6, 0x71, 0x58, 0x3f, 0xc9,
	0x7b, 0x3a, 0x45, 0x56, 0x1a, 0x86, 0x17, 0x03, 0x54, 0xcd, 0x9b, 0x82, 0x9f, 0xa2, 0x9a, 0xff,
	0x65, 0xe2, 0xcd, 0xaf, 0xc7, 0xb3, 0x89, 0x77, 0x35, 0x1c, 0x0c, 0xbd, 0x7e, 0xed, 0x01, 0x7e,
	0x8c, 0x4e, 0xaf, 0x3e, 0x8e, 0x46, 0x43, 0xdf, 0xf7, 0xfa, 0x35, 0x07, 0xbb, 0xe8, 0xe1, 0xc4,
	0x1b, 0xf7, 0x87, 0xe3, 0x0f, 0xb5, 0x23, 0x7c, 0x86, 0x1e, 0xf5, 0xae, 0x07, 0x03, 0x6f, 0xea,
	0xf5, 0x6b, 0x95, 0xb7, 0x9b, 0xdb, 0xae, 0x44, 0x97, 0x36, 0xa6, 0x4d, 0x69, 0x6a, 0x60, 0x59,
	0x2c, 0x49, 0xc0, 0x53, 0x7a, 0x78, 0xcd, 0x5e, 0x26, 0xf8, 0x0f, 0x08, 0x94, 0xa4, 0xbb, 0x62,
	0xb5, 0xa7, 0x21, 0x53, 0x4c, 0x42, 0x2e, 0x15, 0xab, 0xbd, 0x19, 0x25, 0x49, 0x77, 0xfa, 0xb9,
	0x2f, 0x46, 0x5e, 0xd2, 0x9d, 0x59, 0xec, 0x7b, 0x7f, 0x9c, 0xdb, 0xee, 0x77, 0xf4, 0xe2, 0x9e,
	0x83, 0x75, 0x93, 0xf0, 0xeb, 0xff, 0x39, 0x12, 0x5d, 0x06, 0x3c, 0x2d, 0x79, 0x19, 0x5f, 0x47,
	0xc5, 0xbe, 0x88, 0x27, 0x6c, 0x15, 0x11, 0x2e, 0x22, 0x1a, 0xc1, 0x4a, 0x4f, 0x01, 0xbd, 0x8b,
	0x74, 0xdf, 0xff, 0xf3, 0xae, 0x10, 0x16, 0x27, 0xda, 0xd9, 0xf9, 0x17, 0x00, 0x00, 0xff, 0xff,
	0xd2, 0x9d, 0x8c, 0x68, 0x11, 0x04, 0x00, 0x00,
}
