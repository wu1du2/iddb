// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/asset/v1p1beta1/assets.proto

package asset

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	v1 "google.golang.org/genproto/googleapis/iam/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The standard metadata of a cloud resource.
type StandardResourceMetadata struct {
	// The full resource name. For example:
	// `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
	// See [Resource
	// Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
	// for more information.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of this resource.
	// For example: "compute.googleapis.com/Disk".
	AssetType string `protobuf:"bytes,2,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`
	// The project that this resource belongs to, in the form of
	// `projects/{project_number}`.
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// The display name of this resource.
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// One or more paragraphs of text description of this resource. Maximum length
	// could be up to 1M bytes.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Additional searchable attributes of this resource.
	// Informational only. The exact set of attributes is subject to change.
	// For example: project id, DNS name etc.
	AdditionalAttributes []string `protobuf:"bytes,10,rep,name=additional_attributes,json=additionalAttributes,proto3" json:"additional_attributes,omitempty"`
	// Location can be "global", regional like "us-east1", or zonal like
	// "us-west1-b".
	Location string `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`
	// Labels associated with this resource. See [Labelling and grouping GCP
	// resources](https://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources)
	// for more information.
	Labels map[string]string `protobuf:"bytes,12,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Network tags associated with this resource. Like labels, network tags are a
	// type of annotations used to group GCP resources. See [Labelling GCP
	// resources](lhttps://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources)
	// for more information.
	NetworkTags          []string `protobuf:"bytes,13,rep,name=network_tags,json=networkTags,proto3" json:"network_tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StandardResourceMetadata) Reset()         { *m = StandardResourceMetadata{} }
func (m *StandardResourceMetadata) String() string { return proto.CompactTextString(m) }
func (*StandardResourceMetadata) ProtoMessage()    {}
func (*StandardResourceMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_292d674e8a9d7e8b, []int{0}
}

func (m *StandardResourceMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StandardResourceMetadata.Unmarshal(m, b)
}
func (m *StandardResourceMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StandardResourceMetadata.Marshal(b, m, deterministic)
}
func (m *StandardResourceMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandardResourceMetadata.Merge(m, src)
}
func (m *StandardResourceMetadata) XXX_Size() int {
	return xxx_messageInfo_StandardResourceMetadata.Size(m)
}
func (m *StandardResourceMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StandardResourceMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StandardResourceMetadata proto.InternalMessageInfo

func (m *StandardResourceMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StandardResourceMetadata) GetAssetType() string {
	if m != nil {
		return m.AssetType
	}
	return ""
}

func (m *StandardResourceMetadata) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *StandardResourceMetadata) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *StandardResourceMetadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *StandardResourceMetadata) GetAdditionalAttributes() []string {
	if m != nil {
		return m.AdditionalAttributes
	}
	return nil
}

func (m *StandardResourceMetadata) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *StandardResourceMetadata) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *StandardResourceMetadata) GetNetworkTags() []string {
	if m != nil {
		return m.NetworkTags
	}
	return nil
}

// The result for a IAM Policy search.
type IamPolicySearchResult struct {
	// The [full resource
	// name](https://cloud.google.com/apis/design/resource_names#full_resource_name)
	// of the resource associated with this IAM policy.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// The project that the associated GCP resource belongs to, in the form of
	// `projects/{project_number}`. If an IAM policy is set on a resource (like VM
	// instance, Cloud Storage bucket), the project field will indicate the
	// project that contains the resource. If an IAM policy is set on a folder or
	// orgnization, the project field will be empty.
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// The IAM policy directly set on the given resource. Note that the original
	// IAM policy can contain multiple bindings. This only contains the bindings
	// that match the given query. For queries that don't contain a constrain on
	// policies (e.g. an empty query), this contains all the bindings.
	Policy *v1.Policy `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	// Explanation about the IAM policy search result. It contains additional
	// information to explain why the search result matches the query.
	Explanation          *IamPolicySearchResult_Explanation `protobuf:"bytes,5,opt,name=explanation,proto3" json:"explanation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *IamPolicySearchResult) Reset()         { *m = IamPolicySearchResult{} }
func (m *IamPolicySearchResult) String() string { return proto.CompactTextString(m) }
func (*IamPolicySearchResult) ProtoMessage()    {}
func (*IamPolicySearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_292d674e8a9d7e8b, []int{1}
}

func (m *IamPolicySearchResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IamPolicySearchResult.Unmarshal(m, b)
}
func (m *IamPolicySearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IamPolicySearchResult.Marshal(b, m, deterministic)
}
func (m *IamPolicySearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IamPolicySearchResult.Merge(m, src)
}
func (m *IamPolicySearchResult) XXX_Size() int {
	return xxx_messageInfo_IamPolicySearchResult.Size(m)
}
func (m *IamPolicySearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_IamPolicySearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_IamPolicySearchResult proto.InternalMessageInfo

func (m *IamPolicySearchResult) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *IamPolicySearchResult) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *IamPolicySearchResult) GetPolicy() *v1.Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *IamPolicySearchResult) GetExplanation() *IamPolicySearchResult_Explanation {
	if m != nil {
		return m.Explanation
	}
	return nil
}

// Explanation about the IAM policy search result.
type IamPolicySearchResult_Explanation struct {
	// The map from roles to their included permission matching the permission
	// query (e.g. containing `policy.role.permissions:`). A sample role string:
	// "roles/compute.instanceAdmin". The roles can also be found in the
	// returned `policy` bindings. Note that the map is populated only if
	// requesting with a permission query.
	MatchedPermissions   map[string]*Permissions `protobuf:"bytes,1,rep,name=matched_permissions,json=matchedPermissions,proto3" json:"matched_permissions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *IamPolicySearchResult_Explanation) Reset()         { *m = IamPolicySearchResult_Explanation{} }
func (m *IamPolicySearchResult_Explanation) String() string { return proto.CompactTextString(m) }
func (*IamPolicySearchResult_Explanation) ProtoMessage()    {}
func (*IamPolicySearchResult_Explanation) Descriptor() ([]byte, []int) {
	return fileDescriptor_292d674e8a9d7e8b, []int{1, 0}
}

func (m *IamPolicySearchResult_Explanation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IamPolicySearchResult_Explanation.Unmarshal(m, b)
}
func (m *IamPolicySearchResult_Explanation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IamPolicySearchResult_Explanation.Marshal(b, m, deterministic)
}
func (m *IamPolicySearchResult_Explanation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IamPolicySearchResult_Explanation.Merge(m, src)
}
func (m *IamPolicySearchResult_Explanation) XXX_Size() int {
	return xxx_messageInfo_IamPolicySearchResult_Explanation.Size(m)
}
func (m *IamPolicySearchResult_Explanation) XXX_DiscardUnknown() {
	xxx_messageInfo_IamPolicySearchResult_Explanation.DiscardUnknown(m)
}

var xxx_messageInfo_IamPolicySearchResult_Explanation proto.InternalMessageInfo

func (m *IamPolicySearchResult_Explanation) GetMatchedPermissions() map[string]*Permissions {
	if m != nil {
		return m.MatchedPermissions
	}
	return nil
}

// IAM permissions
type Permissions struct {
	// A list of permissions. A sample permission string: "compute.disk.get".
	Permissions          []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Permissions) Reset()         { *m = Permissions{} }
func (m *Permissions) String() string { return proto.CompactTextString(m) }
func (*Permissions) ProtoMessage()    {}
func (*Permissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_292d674e8a9d7e8b, []int{2}
}

func (m *Permissions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Permissions.Unmarshal(m, b)
}
func (m *Permissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Permissions.Marshal(b, m, deterministic)
}
func (m *Permissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permissions.Merge(m, src)
}
func (m *Permissions) XXX_Size() int {
	return xxx_messageInfo_Permissions.Size(m)
}
func (m *Permissions) XXX_DiscardUnknown() {
	xxx_messageInfo_Permissions.DiscardUnknown(m)
}

var xxx_messageInfo_Permissions proto.InternalMessageInfo

func (m *Permissions) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func init() {
	proto.RegisterType((*StandardResourceMetadata)(nil), "google.cloud.asset.v1p1beta1.StandardResourceMetadata")
	proto.RegisterMapType((map[string]string)(nil), "google.cloud.asset.v1p1beta1.StandardResourceMetadata.LabelsEntry")
	proto.RegisterType((*IamPolicySearchResult)(nil), "google.cloud.asset.v1p1beta1.IamPolicySearchResult")
	proto.RegisterType((*IamPolicySearchResult_Explanation)(nil), "google.cloud.asset.v1p1beta1.IamPolicySearchResult.Explanation")
	proto.RegisterMapType((map[string]*Permissions)(nil), "google.cloud.asset.v1p1beta1.IamPolicySearchResult.Explanation.MatchedPermissionsEntry")
	proto.RegisterType((*Permissions)(nil), "google.cloud.asset.v1p1beta1.Permissions")
}

func init() {
	proto.RegisterFile("google/cloud/asset/v1p1beta1/assets.proto", fileDescriptor_292d674e8a9d7e8b)
}

var fileDescriptor_292d674e8a9d7e8b = []byte{
	// 602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6a, 0xdb, 0x40,
	0x10, 0x46, 0x76, 0x92, 0xd6, 0xa3, 0x14, 0xca, 0x36, 0xa1, 0x42, 0xa4, 0xe0, 0xe6, 0x94, 0x1c,
	0xba, 0x42, 0xce, 0xa5, 0x3f, 0x87, 0x10, 0x97, 0x50, 0x0a, 0x4d, 0x31, 0x4a, 0x48, 0x21, 0x04,
	0xcc, 0x58, 0x5a, 0x14, 0x35, 0x92, 0x76, 0xd9, 0x5d, 0xbb, 0xd5, 0x1b, 0x94, 0x3e, 0x4a, 0xcf,
	0x85, 0xbe, 0x43, 0x9f, 0xa5, 0x0f, 0xd0, 0x63, 0xd1, 0x6a, 0x6d, 0x8b, 0xd6, 0xf1, 0xa5, 0xb7,
	0x9d, 0xf9, 0xbe, 0xfd, 0x66, 0x76, 0x3e, 0x69, 0xe0, 0x30, 0xe5, 0x3c, 0xcd, 0x59, 0x10, 0xe7,
	0x7c, 0x9a, 0x04, 0xa8, 0x14, 0xd3, 0xc1, 0x2c, 0x14, 0xe1, 0x84, 0x69, 0x0c, 0x9b, 0x58, 0x51,
	0x21, 0xb9, 0xe6, 0x64, 0xaf, 0xa1, 0x52, 0x43, 0xa5, 0x06, 0xa2, 0x0b, 0xaa, 0xef, 0x5b, 0xa1,
	0x0c, 0x8b, 0x60, 0x16, 0x06, 0x82, 0xe7, 0x59, 0x5c, 0x35, 0x37, 0x7d, 0x7b, 0x33, 0x40, 0x91,
	0x05, 0x58, 0x96, 0x5c, 0xa3, 0xce, 0x78, 0x69, 0x75, 0xf7, 0x7f, 0x74, 0xc1, 0x3b, 0xd7, 0x58,
	0x26, 0x28, 0x93, 0x88, 0x29, 0x3e, 0x95, 0x31, 0x3b, 0x63, 0x1a, 0x13, 0xd4, 0x48, 0x08, 0x6c,
	0x94, 0x58, 0x30, 0xcf, 0xe9, 0x3b, 0x07, 0xbd, 0xc8, 0x9c, 0xc9, 0x13, 0x00, 0x53, 0x7d, 0xac,
	0x2b, 0xc1, 0xbc, 0x8e, 0x41, 0x7a, 0x26, 0x73, 0x51, 0x09, 0x46, 0x3c, 0xb8, 0x27, 0x24, 0xff,
	0xc8, 0x62, 0xed, 0x75, 0x0d, 0x36, 0x0f, 0xc9, 0x53, 0xd8, 0x4e, 0x32, 0x25, 0x72, 0xac, 0xc6,
	0x46, 0x74, 0xc3, 0xc0, 0xae, 0xcd, 0xbd, 0xaf, 0xb5, 0xfb, 0xe0, 0x26, 0x4c, 0xc5, 0x32, 0x13,
	0x75, 0x8b, 0xde, 0xa6, 0x65, 0x2c, 0x53, 0xe4, 0x08, 0x76, 0x31, 0x49, 0xb2, 0xfa, 0x8c, 0xf9,
	0x18, 0xb5, 0x96, 0xd9, 0x64, 0xaa, 0x99, 0xf2, 0xa0, 0xdf, 0x3d, 0xe8, 0x45, 0x3b, 0x4b, 0xf0,
	0x64, 0x81, 0x11, 0x1f, 0xee, 0xe7, 0x3c, 0x36, 0xcf, 0xf6, 0x5c, 0xa3, 0xb9, 0x88, 0xc9, 0x15,
	0x6c, 0xe5, 0x38, 0x61, 0xb9, 0xf2, 0xb6, 0xfb, 0xdd, 0x03, 0x77, 0x30, 0xa4, 0xeb, 0x06, 0x4d,
	0xef, 0x1a, 0x15, 0x7d, 0x67, 0x44, 0x4e, 0x4b, 0x2d, 0xab, 0xc8, 0x2a, 0xd6, 0x2f, 0x2e, 0x99,
	0xfe, 0xc4, 0xe5, 0xed, 0x58, 0x63, 0xaa, 0xbc, 0x07, 0xa6, 0x47, 0xd7, 0xe6, 0x2e, 0x30, 0x55,
	0xfe, 0x0b, 0x70, 0x5b, 0x37, 0xc9, 0x43, 0xe8, 0xde, 0xb2, 0xca, 0xce, 0xbb, 0x3e, 0x92, 0x1d,
	0xd8, 0x9c, 0x61, 0x3e, 0x9d, 0x4f, 0xba, 0x09, 0x5e, 0x76, 0x9e, 0x3b, 0xfb, 0xbf, 0xba, 0xb0,
	0xfb, 0x16, 0x8b, 0x91, 0xf1, 0xfa, 0x9c, 0xa1, 0x8c, 0x6f, 0x22, 0xa6, 0xa6, 0xb9, 0xae, 0xdf,
	0x2b, 0x6d, 0x7f, 0x56, 0x6a, 0x11, 0xaf, 0xf1, 0xe7, 0x19, 0x6c, 0x35, 0xdf, 0x8d, 0x71, 0xc6,
	0x1d, 0xec, 0xce, 0x27, 0x91, 0x61, 0x41, 0x67, 0x21, 0x6d, 0x0a, 0x45, 0x96, 0x44, 0x10, 0x5c,
	0xf6, 0x59, 0xe4, 0x58, 0xe2, 0xc2, 0x2b, 0x77, 0x70, 0xbc, 0x7e, 0x7a, 0x2b, 0xdb, 0xa5, 0xa7,
	0x4b, 0x99, 0xa8, 0xad, 0xe9, 0x7f, 0xed, 0x80, 0xdb, 0x02, 0xc9, 0x17, 0x07, 0x1e, 0x15, 0xa8,
	0xe3, 0x1b, 0x96, 0x8c, 0x05, 0x93, 0x45, 0xa6, 0x54, 0xfd, 0x25, 0x7b, 0x8e, 0x71, 0xee, 0xc3,
	0x7f, 0xd6, 0xa6, 0x67, 0x8d, 0xf4, 0x68, 0xa9, 0xdc, 0xd8, 0x49, 0x8a, 0x7f, 0x00, 0x5f, 0xc0,
	0xe3, 0x3b, 0xe8, 0x2b, 0x3c, 0x3c, 0x6e, 0x7b, 0xe8, 0x0e, 0x0e, 0xd7, 0x37, 0xda, 0x12, 0x6c,
	0xdb, 0x1d, 0x80, 0xdb, 0x42, 0xea, 0x5f, 0xe5, 0xef, 0x11, 0xf4, 0xa2, 0x76, 0x6a, 0xf8, 0xdd,
	0x81, 0x7e, 0xcc, 0x8b, 0xb5, 0xc5, 0x86, 0x70, 0x52, 0x27, 0x46, 0xf5, 0x2a, 0x18, 0x39, 0x57,
	0x27, 0x96, 0x9b, 0xf2, 0x1c, 0xcb, 0x94, 0x72, 0x99, 0x06, 0x29, 0x2b, 0xcd, 0xa2, 0x08, 0x1a,
	0x08, 0x45, 0xa6, 0x56, 0xaf, 0xab, 0x57, 0x26, 0xfe, 0xed, 0x38, 0xdf, 0x3a, 0x7b, 0x6f, 0x1a,
	0x99, 0xd7, 0xa6, 0xa4, 0xa9, 0x40, 0x2f, 0xc3, 0x51, 0x38, 0xac, 0x79, 0x3f, 0xe7, 0xf0, 0xb5,
	0x81, 0xaf, 0x0d, 0x7c, 0x7d, 0x39, 0x97, 0x99, 0x6c, 0x99, 0x72, 0x47, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x55, 0x70, 0xd8, 0xaf, 0x1c, 0x05, 0x00, 0x00,
}
